\chapter{Metodología}
\label{cap:metodologia}

Las principales herramientas utilizadas en este trabajo han sido las siguientes.

\begin{itemize}
  \item \LaTeX \, como procesador de textos científico.
  \item \emph{Scala}, \emph{Spark} y \emph{MLlib} como ecosistema para el
  tratamiento de datos en entornos \emph{Big Data}.
  \item \emph{R} y \emph{ggplot2} para graficar resultados. Junto a \emph{knitr},
  este documento sigue el paradigma de \emph{programación literaria},
  uniendo documento y programa, siendo muy cómodo de escribir y leer.
  \item MariaDB como sistema gestor de bases de datos relacionales (SQL).
\end{itemize}

Se han escogido estas herramientas por ser el estado del arte en cada uno de los
ámbitos para los que fueron desarrolladas. En particular, con \emph{Scala}
y \emph{Spark} se consigue tratamiento de datos en entornos \emph{Big Data} de manera
transparente al usuario, ofreciendo un desarrollo similar en entornos
centralizados y distribuidos.

\section{Selección de los datos}
\label{sec:seleccion}

Los datos utilizados se han cogido de \citep{DBLP:conf/flairs/RobertsonW14},
que con su trabajo ofrecen seis bases de datos relacionales de partidas dos
contra dos, con las distintas combinaciones de razas que ofrece el juego.

\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{figure/Robertson14DatabaseDiagram.pdf}
  \caption{Diagrama Entidad-Relación que modela cada una de las bases de datos.}
  \label{fig:database}
\end{figure}

En la figura~\ref{fig:database} se puede ver el diagrama Entidad-Relación de
las bases de datos que contienen las partidas. En primer lugar hay que
comprender los datos que se tienen para saber de qué conocimiento se parte.
Este paso ha sido sencillo gracias a lo dicho en el capítulo~\ref{cap:objetivos},
el que el trabajo de \citep{DBLP:conf/flairs/RobertsonW14} sea libre facilita
mucho esta tarea. La mayoría de características comparten nombre con atributos
propios del juego extraídos de la API más utilizada para trabajar con
\emph{StarCraft}, la \fnurl{\emph{BWAPI}}{http://bwapi.github.io/}. Otros datos
son derivados que han calculado los investigadores, como la distancia a la base
en un determinado momento.

En siguiente lugar, hay que ver
qué variables se cogen y cómo se organizan. El objetivo de este
paso es conseguir una tabla de la forma filas por columnas, de manera que pueda
ser interpretable por cualquier algoritmo clásico de aprendizaje.

La propuesta es la siguiente: cada fila del conjunto de datos va a ser un
instante de la partida, que estará compuesto por los recursos de cada jugador.
Es un enfoque distinto a la mayoría de los que se trabajan, como se ha comentado
en el capítulo~\ref{cap:introduccion}.
A primera vista parece sencillo, pero se verá que conseguir información sobre
las unidades de cada jugador no va a ser tarea fácil.

\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{figure/Robertson14DatabaseDiagramSeleccion.pdf}
  \caption{Variables seleccionadas de las bases de datos.}
  \label{fig:databaseSelection}
\end{figure}

En la figura~\ref{fig:databaseSelection} ve pueden ver las variables
seleccionadas, que se explican en las siguientes líneas. Posteriormente se
procederá a explicar cómo se han extraído dichas características.

Las características seleccionadas son, principalmente, los recursos de cada
jugador, sus unidades (que se cuantifican no según el número sino según la
suma de unos determinados valores que tiene cada unidad, dependiendo de su
importancia) y sus edificios, además de las observaciones de estos valores que
tiene un jugador del otro. Por último, también se tienen en cuenta el valor
que cada jugador cree que queda de los recursos del mapa.

Los detalles de las características seleccionadas según cada tabla son:

\begin{itemize}
  \item replay: Esta tabla contiene datos asociados a cada partida.
  \begin{itemize}
    \item ReplayID: Identificador de cada partida.
    \item Duration: Duración (en frames) de cada partida. 15 frames equivalen a 1 segundo.
  \end{itemize}
  \item playerreplay: Esta tabla contiene datos asociados a un jugador en una partida.
  \begin{itemize}
    \item PlayerReplayID: Identificador de un jugador en una partida.
    \item ReplayID: Identificador de partida asociado.
    \item Winner: Ganador de cada partida.
  \end{itemize}
  \item resourcechange: Esta tabla contiene datos asociados a cambios en los recursos de un jugador.
  \begin{itemize}
    \item PlayerReplayID: Identificador del jugador que produce un cambio.
    \item Frame: Frame en el que se produce un cambio.
    \item Minerals: Cantidad de minerales que tiene un jugador en ese momento.
    \item Gas: Cantidad de gas que tiene un jugador en ese momento.
    \item Supply: Capacidad de carga del jugador.
    \item TotalMinerals: Cantidad total de minerales que ha obtenido un jugador, sin contar gastos.
    \item TotalGas: Cantidad total de gas que ha obtenido un jugador, sin contar gastos.
    \item TotalSupply: Capacidad que ha obtenido un jugador, sin contar gastos.
  \end{itemize}
  \item regionvaluechange: Esta tabla contiene datos asociados a cambios de un jugador
  en una región del mapa determinada. Cada \emph{value}, que llamaremos de aquí en adelante
  \emph{valor}, es la suma del precio de una unidad en Minerales y Gas.
  \begin{itemize}
    \item PlayerReplayID: Identificador del jugador que produce un cambio.
    \item RegionID: Identificador de la región del mapa donde se produce un cambio.
    \item Frame: Frame en el que se produce el cambio.
    \item GroundUnitValue: Valor de las unidades terrestres en esta región.
    \item BuildingValue: Valor de las construcciones en esta región.
    \item AirUnitValue: Valor de las unidades aéreas en esta región.
    \item EnemyGroundUnitValue: Valor de las unidades terrestres del enemigo en esta región.
    Este valor es estimado, sólo se conoce lo que el jugador puede ver del enemigo.
    \item EnemyBuildingValue: Valor de las construcciones del enemigo en esta región.
    Este valor es estimado, sólo se conoce lo que el jugador puede ver del enemigo.
    \item EnemyAirUnitValue: Valor de las unidades aéreas del enemigo en esta región.
    Este valor es estimado, sólo se conoce lo que el jugador puede ver del enemigo.
    \item ResourceValue: Valor de los recursos en esta región. Este valor es estimado,
    sólo se conoce lo que el jugador puede ver del mapa. Si el jugador no conoce una zona, estima que los recursos restantes es la totalidad de lo disponible en la región.
  \end{itemize}
\end{itemize}

Una vez decididas las variables que vamos a tomar, se pasará a manejar las
bases de datos para conseguirlas de la manera más limpia posible.

\section{Preprocesamiento y transformación de los datos}
\label{sec:preprocesamiento}

Como se ha comentado anteriormente, los datos vienen organizados en seis bases
de datos relacionales, de tipo SQL, por lo que se hace necesario el uso de un
\emph{Sistema Gestor de Bases de Datos}. Como se comentó al principio de esta
sección, se ha elegido \emph{MariaDB} por ser la implementación libre de la
archiconocida \emph{MySQL}. \unsure{Si hay tiempo, ¿por qué no?}{No} se detallará
el montaje y puesta en marcha de esto, aunque es de gran importancia
hacer saber que para cualquier científico de datos, manejarse con el
levantamiento de este tipo de servicios también es muy importante.

El procedimiento para extraer las partidas no es más que una consulta para cada
partida de la base de datos. Esta consulta es algo compleja, por lo que se
intentará explicar de la manera más clara posible.

Lo primero será concentrarse en una partida: después se iterará sobre todas
con un procedimiento. Se podría haber resuelto todo con una sola consulta, pero
habría complicado un poco más su escritura y depuración. Una vez tenemos un
\emph{ReplayID} en concreto, se toma su duración \emph{Duration} y los
jugadores que compiten en ella \emph{PlayerReplayID}. Se tomará como el primero
el que tenga un \emph{PlayerReplayID} más pequeño, aunque se verá más adelante
que no habrá ninguna ventaja para ningún jugador.

Ahora hay que tomar una decisión importante. Tras un primer vistazo a los datos,
se observa que los instantes de tiempo \emph{Frame} en los que se registra
algún cambio no tienen por qué ser ni siquiera
parecidos, ni entre jugadores ni entre cambios de unidades o recursos.
Por tanto, se procede de la siguiente manera: para no perjudicar a ninguno de
los jugadores, en el conjunto de datos final los instantes de tiempo tomados
como referencia serán aquellos instantes en los que exista un cambio en los
recursos, que no unidades, de cada uno de los dos jugadores.

Esto implica directamente otra pequeña decisión al diseñar la consulta. Como
se ha comentado, los instantes de tiempo de los cambios en las unidades de
un jugador no tienen por qué coincidir con los cambios en recursos (es más,
es muy poco probable que coincidan exactamente). Por lo tanto, al tomar como
referencia los instantes de tiempo \emph{Frame} de cambios de recursos, hay
que buscar la manera de tomar el estado actual de las unidades de cada jugador
más precisa posible en el instante determinado. Esto se soluciona fácilmente
tomando el último valor de las unidades en el tiempo: se tomará el valor de
las unidades en el instante de tiempo más grande posible, pero más pequeño
que el actual.

Una vez se tienen las referencias en tl tiempo, falta un detalle importante:
como se ha comentado en la sección~\ref{sec:seleccion}, los cambios registrados
en los valores de las unidades son a nivel de una determinada región del mapa.
Por tanto, para tomar el valor total de las unidades de un jugador, hay que
sumar los valores en todas las regiones del mapa.

Además de todo esto, existe una última cuestión que se ha tenido que resolver.
Al tomar datos de un jugador en un instante de tiempo para el que dicho jugador
no tiene información, dichos datos desconocidos se rellenan con \texttt{NULL}.
Sería sencillo dejarlos así y en una siguiente fase, imputar dichos datos
perdidos con cualquier algoritmo clásico. Pero existe una solución mejor y
mucho más lógica para este problema: si para un jugador, un dato no existe
porque no ha habido un cambio en ese instante de tiempo, significa que tendrá
los mismos recursos/unidades/etc que en su anterior cambio. Por tanto, sólo
hay que tomar el valor no nulo anterior más próximo para cada una de las
variables de la tabla.

Una vez con todos los datos bien formados, sólo hay que añadir el
\emph{ReplayID}, la duración de la partida \emph{Duration}, el ganador
\emph{Winner} y las razas implicadas. De esta manera ya tenemos todos los
datos de una partida bien formados, sin valores perdidos y listos para ser
tratados como un conjunto de datos sobre cualquier software. Como se ha
comentado anteriormente, sólo hay que iterar por los distintos \emph{ReplayID}
para conseguir los datos de todas las partidas de cada una de las seis bases
de datos.

Con todo esto, se puede comenzar con un \info{meter EDA}{análisis}
exploratorio de datos.

Por otra parte, el conjunto de datos es tan completo en su estructura, que no
se van a extraer ningún tipo de características derivadas. Algunas útiles
podrían ser el acumulado de recursos durante la partida los cuales ya están
reflejados en los datos. Otra característica interesante podría ser la
proporción de la partida que se ha jugado, pero supondría un problema si
quisiéramos cumplir el objetivo de implantarlo en un agente en tiempo real,
ya que no sabría la duración de la partida hasta que no acabara.

\section{Modelado}
\label{sec:modelado}

A la vista de la gran cantidad de datos que han sido extraídos, hay que
tomar la decisión de con qué software se van a manejar. Como se comentó
en~\ref{cap:metodologia}, se ha utilizado la simbiosis de \emph{Scala},
\emph{Spark} y \emph{MLlib}, que es el estado del arte en entornos de
\emph{Big Data}. Proveen herramientas para que realizar análisis
en \emph{Big Data} en entornos distribuidos sea similar a hacerlo en un
entorno centralizado.

En un primer intento de sacar jugo a los datos tomados, se probó a utilizar
la clásica combinación de \emph{R} y el archiconocido paquete \emph{caret},
pero las implementaciones de algoritmos clásicos como \emph{Random Forest}
no eran capaces de manejar esta cantidad de datos, llenando la memoria
de la máquina en cuestión de minutos. Este hecho ha sido un gran incentivo
para tomar la decisión arriba propuesta: utilizar \emph{Spark} para el
tratamiento de datos. Aunque es de mencionar que el problema a tratar NO es
\emph{Big Data}, es bastante grande para tratarlo en una computadora personal.
Por tanto, el usar herramientas destinadas al tratamiento de grandes cantidades
de datos evitará tener problemas como los indicados.

Antes de comentar el modelado, organización de módulos y demás, se va a
realizar una breve introducción a \emph{Spark}, cómo funciona y cómo se utiliza.
Nótese que la versión utilizada de \emph{Spark} ha sido la 2.1.1, versión
lanzada el 2 de Mayo de 2017. Además, es de destacar que la versión de la API
de la \emph{MLlib} utilizada es la más nueva, que trabaja con el tipo de dato
\emph{DataFrame}, al contrario que la antigua, que trabajaba con el tipo de dato
\emph{RDD}, (\texttt{Resilient Distributed Data}). Aunque coexisten ambas,
se recomienda utilizar la nueva, ya que es el camino que seguirá tomando
\emph{Spark} y \emph{MLlib} en el futuro próximo.

Primero se estudiarán varios conceptos esenciales para la comprensión del
ecosistema de trabajo que estamos utilizando, que están muy bien explicados
en \fnurl{la web de la API de \emph{Spark}}{https://spark.apache.org/docs/latest/ml-pipeline.html}.
\emph{Spark} y \emph{MLlib}
se basan en el concepto de \emph{Pipeline}, \emph{Tubería} en español.
\emph{MLlib} estandariza la API, pudiendo encadenar todo tipo de métodos para
aprendizaje automático de manera sencilla, como si de un flujo de trabajo
se tratara. Existen varios tipos de ``objetos'' que se pueden encadenar
dentro de un \emph{Pipeline}.

\begin{itemize}
  \item \emph{DataFrame}: Tipo de dato que almacena un conjunto de datos
  para aplicar aprendizaje sobre él. Este tipo de dato viene directamente del
  módlulo \emph{SQL} para \emph{Spark}, lo que significa que podemos realizar
  cualquier operación de \emph{SQL} sobre éste directamente desde \emph{Spark},
  facilitando mucho la tarea de realizar operaciones sencillas pero potentes
  en \emph{SQL}, como agregaciones, agrupaciones y selecciones.
  Además, a partir de la versión 2.0 de \emph{Spark}, se pueden cargar directamente
  ficheros comunes de distinto tipo (como \texttt{csv} o \texttt{json}) sin
  necesidad de bibliotecas externas y sin complicaciones.
  \item \emph{Transformer}: Algoritmo que transforma un \emph{DataFrame} en
  otro \emph{DataFrame}. El más utilizado es un propio modelo de aprendizaje,
  que transforma un \emph{DataFrame} con datos en otro con datos y predicciones.
  Otro muy usual es transformar alguna variable o un conjunto de ellas, para
  discretizarlas, normalizarlas, etc.
  \item \emph{Estimator}: Algoritmo que ajusta un \emph{DataFrame} para producir
  un \emph{Transformer}. Un algoritmo de aprendizaje es un \emph{Estimator}
  que proporciona un modelo, un \emph{Transformer}.
  \item \emph{Pipeline}: Estructura para encadenar \emph{Transformers} y
  \emph{Estimators} para producir un flujo de trabajo para aprendizaje.
  \item \emph{Parameter}: Parámetros para \emph{Transformers} y \emph{Estimators}.
\end{itemize}

Más específicamente, un \emph{Pipeline} es una secuancia de pasos, donde cada
uno es o bien un \emph{Transformer} o un \emph{Estimator}. Estos pasos tienen
un orden, determinado en tiempo de compilación, donde la entrada es un
\emph{DataFrame} que se va transformando con los operadores que constituyan el
\emph{Pipeline}. En la figura~\ref{fig:pipeline} se puede ver un ejemplo de
\emph{Pipeline} para un problema de clasificación de texto, donde los elementos
en azul son \emph{Transformers} y el elemento rojo, el algoritmo de modelado,
es un \emph{Estimator}. En la fila de abajo, se comtemplan las modificaciones
que van sufriendo los datos hasta llegar al modelo final.

\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{figure/ml-Pipeline.png}
  \caption{Ejemplo de \emph{Pipeline} para clasificación de texto.}
  \label{fig:pipeline}
\end{figure}

Además, estos \emph{Pipelines} pueden ser serializados y guardados en disco
para su posterior carga y utilización, lo cual facilita la labor de análisis
cuando hay que repetir el mismo proceso o cuando el tiempo de cómputo es muy
alto.

Antes de pasar al modelado en sí, hay que destacar un último detalle.
\emph{Spark} y la \emph{MLlib} precisan de que el conjunto de datos de modelado
esté en una forma determinada, con dos componentes:

\begin{itemize}
  \item \emph{Features}: Vector con componentes numéricas que contiene los
  atributos predictores del conjunto de datos.
  \item \emph{Label}: Etiqueta numérica del dato.
\end{itemize}

En cualquier caso, se pueden modificar los nombres de las columnas, pero no
su forma. Por tanto, si se carga un dataset en formato \texttt{csv}, por
ejemplo, habrá que coger todas las variables predictoras y meterlas en un
vector de numéricos, y asegurarse que la etiqueta también esté en dicho formato.

Una vez se tiene idea de cómo funcionan \emph{Spark} junto a la \emph{MLlib},
se pasa a describir cómo se ha organizado el modelado. Se han escrito dos
módulos en \emph{Scala}. Forman un paquete llamado \emph{StarCraft-Analytics}

El primero de ellos, llamado \emph{Modelling}, el cual almacena qué modelos
se van a ajustar y sus parámetros, realiza las siguientes funciones:

\begin{itemize}
  \item Carga los datos del dataset.
  \item Separa el dataset en entrenamiento y test, con proporciones 70\% y 30\%
  respectivamente, guardando las particiones en disco. Si existen, simplemente
  las carga, para mantener las particiones entre ejecuciones.
  \item Forma un \emph{Pipeline} cuya salida es el modelo aprendido, con los
  pasos necesarios para darle el formato necesario al \emph{DataFrame} para
  tratarlo con \emph{MLlib}.
  \item Con este \emph{Pipeline}, tunea los hiperparámetros del modelo
  utilizando validación cruzada con 10 particiones.
  \item Guarda en disco el modelo resultante para su posterior análisis
\end{itemize}

El \emph{Pipeline} es generado de forma dinámica según los modelos
que ya existan en disco, para no reaprender el mismo modelo en varias
ejecuciones distintas. Para ello se hace uso de la orientación a objetos
de \emph{Scala}. El \emph{Pipeline} generado tiene esta estructura.

\begin{itemize}
  \item \texttt{racesIndexer}: \emph{Transformer} del tipo \texttt{StringIndexer}
  que indexa una variable de tipo \texttt{String}. La etiqueta más frecuente
  se indexará con el valor \texttt{0.0}, la siguiente con \texttt{1.0}, y así
  sucesivamente. Se utiliza para indexar la variable que modela las razas
  implicadas en la partida, que es de tipo \texttt{String}.
  \item \texttt{winnerIndexer}: Similar a \texttt{racesIndexer}, pero se usa
  para la variable de salida, que también es de tipo \texttt{String}.
  \item \texttt{assembler}: \emph{Transformer} de tipo \texttt{VectorAssembler}
  que toma varias columnas de un \emph{DataFrame} y genera una nueva con
  todas las de entrada organizadas como un único vector. Este vector será el
  vector de variables predictoras que hablamos antes.
  \item \texttt{featureIndexer}: \emph{Transformer} del tipo \texttt{VectorIndexer}
  que se usa para detectar variables categóricas. Como la única variable
  categórica es la que modela las razas implicadas y tiene 6 posibles valores,
  se configura este paso del \emph{Pipeline} para que cualquier variable que
  tenga más de 6 valores, la tome como continua.
  \item El algoritmo de modelado.
\end{itemize}

Utilizando este \emph{Pipeline} se forma un objeto del tipo \emph{CrossValidator},
que optimiza un objeto del tipo \emph{Estimator} (y se recuerda que un
\emph{Pipeline} lo es) con un determinado grid de parámetros del tipo
\emph{ParamGrid}, utilizando
validación cruzada con 10 particiones según la medida deseada. Esto se consigue
gracias a un objeto del tipo \emph{MulticlassClassificationEvaluator}, el cual
se ha configurado para utilizar la precisión de clasificación. Se ha decidido esta
medida en detrimento del \emph{Area Under Curve}, (\emph{AUC}) porque hay
algunos modelos en \emph{MLlib}
que no tienen implementada la salida necesaria para calcularlo.

Así se consigue un modelo con unos parámetros más cerca de los óptimos para
cada algoritmo y para este problema. Cada uno de los modelos resultantes se
guardará en disco para su uso en el siguiente módulo.

Éste, llamado \emph{Testing}, realiza los siguientes pasos:

\begin{itemize}
  \item Carga las particiones de entrenamiento y test previamente almacenadas.
  \item Carga los modelos guardados en disco.
  \item Para cada modelo, calcula 3 medidas sobre el conjunto de test:
  precisión, \emph{AUC} y \emph{F1}. Guarda los resultados en disco.
  \item Extrae, de los modelos en los que sea posible, la importancia de las
  variables predictoras. No sólo es importante predecir, sino saber por qué
  se da dicha predicción. Guarda los resultados en disco.
\end{itemize}

Con todo lo referente a metodología de trabajo explicada, se pasa a realizar
una discusión de los resultados obtenidos con este enfoque.
